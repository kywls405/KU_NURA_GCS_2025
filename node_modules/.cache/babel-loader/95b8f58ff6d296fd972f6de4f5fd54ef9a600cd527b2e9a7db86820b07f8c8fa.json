{"ast":null,"code":"/*\n (c) 2017, Vladimir Agafonkin\n Simplify.js, a high-performance JS polyline simplification library\n mourner.github.io/simplify-js\n*/\n\n(function () {\n  'use strict';\n\n  // to suit your point format, run search/replace for '.x' and '.y';\n  // for 3D version, see 3d branch (configurability would draw significant performance overhead)\n\n  // square distance between 2 points\n  function getSqDist(p1, p2) {\n    var dx = p1.x - p2.x,\n      dy = p1.y - p2.y;\n    return dx * dx + dy * dy;\n  }\n\n  // square distance from a point to a segment\n  function getSqSegDist(p, p1, p2) {\n    var x = p1.x,\n      y = p1.y,\n      dx = p2.x - x,\n      dy = p2.y - y;\n    if (dx !== 0 || dy !== 0) {\n      var t = ((p.x - x) * dx + (p.y - y) * dy) / (dx * dx + dy * dy);\n      if (t > 1) {\n        x = p2.x;\n        y = p2.y;\n      } else if (t > 0) {\n        x += dx * t;\n        y += dy * t;\n      }\n    }\n    dx = p.x - x;\n    dy = p.y - y;\n    return dx * dx + dy * dy;\n  }\n  // rest of the code doesn't care about point format\n\n  // basic distance-based simplification\n  function simplifyRadialDist(points, sqTolerance) {\n    var prevPoint = points[0],\n      newPoints = [prevPoint],\n      point;\n    for (var i = 1, len = points.length; i < len; i++) {\n      point = points[i];\n      if (getSqDist(point, prevPoint) > sqTolerance) {\n        newPoints.push(point);\n        prevPoint = point;\n      }\n    }\n    if (prevPoint !== point) newPoints.push(point);\n    return newPoints;\n  }\n  function simplifyDPStep(points, first, last, sqTolerance, simplified) {\n    var maxSqDist = sqTolerance,\n      index;\n    for (var i = first + 1; i < last; i++) {\n      var sqDist = getSqSegDist(points[i], points[first], points[last]);\n      if (sqDist > maxSqDist) {\n        index = i;\n        maxSqDist = sqDist;\n      }\n    }\n    if (maxSqDist > sqTolerance) {\n      if (index - first > 1) simplifyDPStep(points, first, index, sqTolerance, simplified);\n      simplified.push(points[index]);\n      if (last - index > 1) simplifyDPStep(points, index, last, sqTolerance, simplified);\n    }\n  }\n\n  // simplification using Ramer-Douglas-Peucker algorithm\n  function simplifyDouglasPeucker(points, sqTolerance) {\n    var last = points.length - 1;\n    var simplified = [points[0]];\n    simplifyDPStep(points, 0, last, sqTolerance, simplified);\n    simplified.push(points[last]);\n    return simplified;\n  }\n\n  // both algorithms combined for awesome performance\n  function simplify(points, tolerance, highestQuality) {\n    if (points.length <= 2) return points;\n    var sqTolerance = tolerance !== undefined ? tolerance * tolerance : 1;\n    points = highestQuality ? points : simplifyRadialDist(points, sqTolerance);\n    points = simplifyDouglasPeucker(points, sqTolerance);\n    return points;\n  }\n\n  // export as AMD module / Node module / browser or worker variable\n  if (typeof define === 'function' && define.amd) define(function () {\n    return simplify;\n  });else if (typeof module !== 'undefined') {\n    module.exports = simplify;\n    module.exports.default = simplify;\n  } else if (typeof self !== 'undefined') self.simplify = simplify;else window.simplify = simplify;\n})();","map":{"version":3,"names":["getSqDist","p1","p2","dx","x","dy","y","getSqSegDist","p","t","simplifyRadialDist","points","sqTolerance","prevPoint","newPoints","point","i","len","length","push","simplifyDPStep","first","last","simplified","maxSqDist","index","sqDist","simplifyDouglasPeucker","simplify","tolerance","highestQuality","undefined","define","amd","module","exports","default","self","window"],"sources":["C:/Users/yati0/NURA_GCS/node_modules/simplify-js/simplify.js"],"sourcesContent":["/*\n (c) 2017, Vladimir Agafonkin\n Simplify.js, a high-performance JS polyline simplification library\n mourner.github.io/simplify-js\n*/\n\n(function () { 'use strict';\n\n// to suit your point format, run search/replace for '.x' and '.y';\n// for 3D version, see 3d branch (configurability would draw significant performance overhead)\n\n// square distance between 2 points\nfunction getSqDist(p1, p2) {\n\n    var dx = p1.x - p2.x,\n        dy = p1.y - p2.y;\n\n    return dx * dx + dy * dy;\n}\n\n// square distance from a point to a segment\nfunction getSqSegDist(p, p1, p2) {\n\n    var x = p1.x,\n        y = p1.y,\n        dx = p2.x - x,\n        dy = p2.y - y;\n\n    if (dx !== 0 || dy !== 0) {\n\n        var t = ((p.x - x) * dx + (p.y - y) * dy) / (dx * dx + dy * dy);\n\n        if (t > 1) {\n            x = p2.x;\n            y = p2.y;\n\n        } else if (t > 0) {\n            x += dx * t;\n            y += dy * t;\n        }\n    }\n\n    dx = p.x - x;\n    dy = p.y - y;\n\n    return dx * dx + dy * dy;\n}\n// rest of the code doesn't care about point format\n\n// basic distance-based simplification\nfunction simplifyRadialDist(points, sqTolerance) {\n\n    var prevPoint = points[0],\n        newPoints = [prevPoint],\n        point;\n\n    for (var i = 1, len = points.length; i < len; i++) {\n        point = points[i];\n\n        if (getSqDist(point, prevPoint) > sqTolerance) {\n            newPoints.push(point);\n            prevPoint = point;\n        }\n    }\n\n    if (prevPoint !== point) newPoints.push(point);\n\n    return newPoints;\n}\n\nfunction simplifyDPStep(points, first, last, sqTolerance, simplified) {\n    var maxSqDist = sqTolerance,\n        index;\n\n    for (var i = first + 1; i < last; i++) {\n        var sqDist = getSqSegDist(points[i], points[first], points[last]);\n\n        if (sqDist > maxSqDist) {\n            index = i;\n            maxSqDist = sqDist;\n        }\n    }\n\n    if (maxSqDist > sqTolerance) {\n        if (index - first > 1) simplifyDPStep(points, first, index, sqTolerance, simplified);\n        simplified.push(points[index]);\n        if (last - index > 1) simplifyDPStep(points, index, last, sqTolerance, simplified);\n    }\n}\n\n// simplification using Ramer-Douglas-Peucker algorithm\nfunction simplifyDouglasPeucker(points, sqTolerance) {\n    var last = points.length - 1;\n\n    var simplified = [points[0]];\n    simplifyDPStep(points, 0, last, sqTolerance, simplified);\n    simplified.push(points[last]);\n\n    return simplified;\n}\n\n// both algorithms combined for awesome performance\nfunction simplify(points, tolerance, highestQuality) {\n\n    if (points.length <= 2) return points;\n\n    var sqTolerance = tolerance !== undefined ? tolerance * tolerance : 1;\n\n    points = highestQuality ? points : simplifyRadialDist(points, sqTolerance);\n    points = simplifyDouglasPeucker(points, sqTolerance);\n\n    return points;\n}\n\n// export as AMD module / Node module / browser or worker variable\nif (typeof define === 'function' && define.amd) define(function() { return simplify; });\nelse if (typeof module !== 'undefined') {\n    module.exports = simplify;\n    module.exports.default = simplify;\n} else if (typeof self !== 'undefined') self.simplify = simplify;\nelse window.simplify = simplify;\n\n})();\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}