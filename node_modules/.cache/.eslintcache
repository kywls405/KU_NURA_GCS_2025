[{"C:\\Users\\yati0\\NURA_GCS\\src\\index.js":"1","C:\\Users\\yati0\\NURA_GCS\\src\\reportWebVitals.js":"2","C:\\Users\\yati0\\NURA_GCS\\src\\App.js":"3","C:\\Users\\yati0\\NURA_GCS\\src\\navInfo.js":"4","C:\\Users\\yati0\\NURA_GCS\\src\\socket.js":"5","C:\\Users\\yati0\\NURA_GCS\\src\\map3d.js":"6","C:\\Users\\yati0\\NURA_GCS\\src\\navball.js":"7","C:\\Users\\yati0\\NURA_GCS\\src\\cfg_window.js":"8"},{"size":552,"mtime":1751630031881,"results":"9","hashOfConfig":"10"},{"size":375,"mtime":1751630031883,"results":"11","hashOfConfig":"10"},{"size":3545,"mtime":1751630031881,"results":"12","hashOfConfig":"10"},{"size":4005,"mtime":1751630031883,"results":"13","hashOfConfig":"10"},{"size":100,"mtime":1751630031885,"results":"14","hashOfConfig":"10"},{"size":2036,"mtime":1751630031883,"results":"15","hashOfConfig":"10"},{"size":2425,"mtime":1751630031883,"results":"16","hashOfConfig":"10"},{"size":5034,"mtime":1751630031881,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1iiqj15",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\yati0\\NURA_GCS\\src\\index.js",[],[],"C:\\Users\\yati0\\NURA_GCS\\src\\reportWebVitals.js",[],[],"C:\\Users\\yati0\\NURA_GCS\\src\\App.js",["45","46","47"],[],"import { useEffect, useState, useRef } from \"react\";\r\n\r\nimport { socket, serIsOn } from \"./socket\";\r\n\r\nimport Navball from \"./navball\";\r\nimport NavInfo from \"./navInfo\";\r\nimport Map from \"./map3d\";\r\nimport CFG from \"./cfg_window\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [imu, imuSet] = useState([]);\r\n  const [gps, gpsSet] = useState([]);\r\n  const [coord, coordSet] = useState([]);\r\n  const [alt, altSet] = useState([]);\r\n  const timeRef = useRef({ imu: -1, gps: -1 });\r\n\r\n  const serialInputRef = useRef();\r\n  const serialInputWidth =\r\n    window.innerWidth > 660 ? window.innerWidth - 360 : 300;\r\n\r\n  useEffect(() => {\r\n    const set_imu = (data) => {\r\n      if (Array.isArray(data.imu) && data.imu.length > 0) {\r\n        imuSet((imu) => [...imu, ...data.imu]);\r\n        timeRef.current.imu = data.time;\r\n      }\r\n    };\r\n    const set_gps = (data) => {\r\n      if (Array.isArray(data.gps) && data.gps.length > 0) {\r\n        gpsSet([...gps, ...data.gps]);\r\n\r\n        let coordList = [];\r\n        let altList = [];\r\n        data.gps.map((value) => {\r\n          if (value.lon === 0.0 && value.lat === 0.0) {\r\n            // do nothing\r\n          } else {\r\n            coordList.push([value.lon, value.lat]);\r\n            altList.push(value.height);\r\n          }\r\n        });\r\n        coordSet((coord) => [...coord, ...coordList]);\r\n        altSet((alt) => [...alt, ...altList]);\r\n        timeRef.current.gps = data.time;\r\n      }\r\n    };\r\n\r\n    socket.on(\"here_are_your_imu\", set_imu);\r\n    socket.on(\"here_are_your_gps\", set_gps);\r\n\r\n    const serialAck = (data) => {\r\n      console.log(\"시리얼을 통해 성공적으로 전송됨: %s\", data);\r\n    };\r\n\r\n    socket.on(\"serialAck\", serialAck);\r\n\r\n    let imuInt = setInterval(() => {\r\n      if (serIsOn) {\r\n        socket.emit(\"give_me_imu\", timeRef.current.imu);\r\n      }\r\n    }, 15);\r\n    let gpsInt = setInterval(() => {\r\n      if (serIsOn) {\r\n        socket.emit(\"give_me_gps\", timeRef.current.gps);\r\n      }\r\n    }, 30);\r\n\r\n    return () => {\r\n      socket.off(\"here_are_your_imu\", set_imu);\r\n      socket.off(\"here_are_your_gps\", set_gps);\r\n\r\n      clearInterval(imuInt);\r\n      clearInterval(gpsInt);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <CFG />\r\n      <div className=\"nav-info\">\r\n        <Navball euler={imu[imu.length - 1]?.euler} />\r\n        <NavInfo imu={imu} gps={gps} />\r\n      </div>\r\n      <div className=\"map\">\r\n        <div\r\n          className=\"serial-input\"\r\n          style={{\r\n            height: \"30px\",\r\n            marginBottom: \"10px\",\r\n          }}\r\n        >\r\n          <input\r\n            ref={serialInputRef}\r\n            style={{\r\n              width: \"500px\",\r\n              height: \"100%\",\r\n              float: \"left\",\r\n            }}\r\n            type=\"text\"\r\n            placeholder={\"시리얼로 전송할 값 입력\"}\r\n          ></input>\r\n          <button\r\n            style={{\r\n              width: \"70px\",\r\n              height: \"100%\",\r\n              float: \"left\",\r\n            }}\r\n            onClick={() => {\r\n              if (serialInputRef.current.value) {\r\n                socket.emit(\"serialInput\", serialInputRef.current.value);\r\n                console.log(\"값 '%s'가 전송됨\", serialInputRef.current.value);\r\n              } else {\r\n                console.log(\"input에 값이 없음\");\r\n              }\r\n            }}\r\n          >\r\n            전송\r\n          </button>\r\n        </div>\r\n        <Map coord={coord} alt={alt} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\yati0\\NURA_GCS\\src\\navInfo.js",[],[],"C:\\Users\\yati0\\NURA_GCS\\src\\socket.js",[],[],"C:\\Users\\yati0\\NURA_GCS\\src\\map3d.js",["48"],[],"import { useEffect, useRef } from \"react\";\r\n\r\nimport * as maptalks from \"maptalks\";\r\n\r\n/**\r\n * 지도를 출력하는 아름다운 함수\r\n * @returns 지도가 있는 div\r\n */\r\nfunction Map(props) {\r\n  const mapRef = useRef();\r\n  const lineRef = useRef();\r\n\r\n  const width = window.innerWidth > 660 ? window.innerWidth - 360 : 300;\r\n  const height = window.innerHeight > 700 ? window.innerHeight - 80 : 620;\r\n\r\n  // div가 생성된 후 한번 실행되는 함수\r\n  useEffect(() => {\r\n    // 지도\r\n    const map = new maptalks.Map(\"map\", {\r\n      center: [127.205438, 34.609169],\r\n      zoom: 17,\r\n      pitch: 40,\r\n      centerCross: true,\r\n      baseLayer: new maptalks.TileLayer(\"tile\", {\r\n        urlTemplate: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\r\n        subdomains: [\"a\", \"b\", \"c\"],\r\n      }),\r\n    });\r\n    mapRef.current = map;\r\n\r\n    // 지도 위 선\r\n    const line = new maptalks.LineString(undefined, {\r\n      properties: {\r\n        altitude: [],\r\n      },\r\n      symbol: {\r\n        lineColor: \"rgb(255, 0, 55)\",\r\n        lineWidth: 3,\r\n      },\r\n    });\r\n    lineRef.current = line;\r\n\r\n    // 지도에 선을 긋는 벡터 레이어\r\n    new maptalks.VectorLayer(\"vector\", line, { enableAltitude: true }).addTo(\r\n      map\r\n    );\r\n\r\n    return () => {\r\n      // 인스턴스 제거\r\n      if (mapRef.current) {\r\n        mapRef.current.remove();\r\n      }\r\n      if (lineRef.current) {\r\n        lineRef.current.remove();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      Array.isArray(props.coord) &&\r\n      Array.isArray(props.alt) &&\r\n      props.coord.length > 0 &&\r\n      props.alt.length == props.coord.length\r\n    ) {\r\n      const lastidx = props.coord.length - 1;\r\n      mapRef.current.setCenter(props.coord[lastidx]);\r\n      lineRef.current.setCoordinates(props.coord);\r\n      lineRef.current.setProperties({ altitude: props.alt });\r\n    }\r\n  }, [props.coord, props.alt]);\r\n\r\n  return <div id=\"map\" style={{ width: width, height: height }}></div>;\r\n}\r\n\r\nexport default Map;\r\n","C:\\Users\\yati0\\NURA_GCS\\src\\navball.js",["49","50","51"],[],"// import { createRoot } from \"react-dom/client\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport { Canvas, useLoader, useFrame } from \"@react-three/fiber\";\r\nimport { TextureLoader } from \"three\";\r\n\r\nimport \"./navball.css\";\r\n\r\n/**\r\n * Navball을 html 위에 출력하는 함수,\r\n * 3D로 멋지게 출력함\r\n * @returns Navball 캔버스가 포함된 깔끔한 html 구문\r\n */\r\nfunction Navball(props) {\r\n  const [euler, eulerSet] = useState([0.0, 0.0, 0.0]);\r\n\r\n  useEffect(() => {\r\n    console.log(euler);\r\n    if (Array.isArray(props.euler) && props.euler.length === 3) {\r\n      eulerSet(props.euler);\r\n    }\r\n  }, [props.euler]);\r\n\r\n  return (\r\n    <div id=\"navball-container\">\r\n      <Canvas\r\n        camera={{\r\n          zoom: 3.55,\r\n          top: 150,\r\n          bottom: -150,\r\n          left: 150,\r\n          right: -150,\r\n          near: 1,\r\n          far: 1024,\r\n          position: [0, 0, 200],\r\n        }}\r\n        orthographic={true} // 멋진 orthographic 카메라\r\n        flat={true} // 아카데미 색공간 말고 그냥 색공간 씁시다\r\n      >\r\n        <NavMesh euler={euler} />\r\n      </Canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * navball을 출력하는 함수.\r\n * mesh가 canvas 안에 있으니까 오류가 떠서 이렇게 분리함.\r\n * @returns navball을 three.js로 랜더링한 그거\r\n */\r\nfunction NavMesh(props) {\r\n  const myMesh = useRef();\r\n  const rollGroup = useRef();\r\n  const pitchGroup = useRef();\r\n  const yawGroup = useRef();\r\n  const [euler, eulerSet] = useState([0.0, 0.0, 0.0]);\r\n\r\n  const PI = 3.141592;\r\n  const DEG2RAD = PI / 180.0;\r\n\r\n  useEffect(() => {\r\n    myMesh.current.rotation.y = (3.0 * 3.141592) / 2.0;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    eulerSet(props.euler);\r\n    rollGroup.current.rotation.z = euler[0] * DEG2RAD; // roll\r\n    pitchGroup.current.rotation.x = euler[1] * DEG2RAD; // pitch\r\n    yawGroup.current.rotation.y = -euler[2] * DEG2RAD; // yaw\r\n  }, [props.euler]);\r\n\r\n  // 텍스쳐 로딩\r\n  const navTexture = useLoader(TextureLoader, \"navball.png\");\r\n  navTexture.anisotropy = 16;\r\n\r\n  return (\r\n    <group ref={rollGroup}>\r\n      <group ref={pitchGroup}>\r\n        <group ref={yawGroup}>\r\n          <mesh ref={myMesh}>\r\n            <sphereGeometry args={[40, 48, 32]} />\r\n            <meshBasicMaterial map={navTexture} />\r\n          </mesh>\r\n        </group>\r\n      </group>\r\n    </group>\r\n  );\r\n}\r\n\r\nexport default Navball;\r\n","C:\\Users\\yati0\\NURA_GCS\\src\\cfg_window.js",[],[],{"ruleId":"52","severity":1,"message":"53","line":20,"column":9,"nodeType":"54","messageId":"55","endLine":20,"endColumn":25},{"ruleId":"56","severity":1,"message":"57","line":36,"column":30,"nodeType":"58","messageId":"59","endLine":36,"endColumn":32},{"ruleId":"60","severity":1,"message":"61","line":77,"column":6,"nodeType":"62","endLine":77,"endColumn":8,"suggestions":"63"},{"ruleId":"64","severity":1,"message":"65","line":64,"column":24,"nodeType":"66","messageId":"67","endLine":64,"endColumn":26},{"ruleId":"52","severity":1,"message":"68","line":3,"column":29,"nodeType":"54","messageId":"55","endLine":3,"endColumn":37},{"ruleId":"60","severity":1,"message":"69","line":21,"column":6,"nodeType":"62","endLine":21,"endColumn":19,"suggestions":"70"},{"ruleId":"60","severity":1,"message":"71","line":69,"column":6,"nodeType":"62","endLine":69,"endColumn":19,"suggestions":"72"},"no-unused-vars","'serialInputWidth' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'gps'. Either include it or remove the dependency array. You can also do a functional update 'gpsSet(g => ...)' if you only need 'gps' in the 'gpsSet' call.","ArrayExpression",["73"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useFrame' is defined but never used.","React Hook useEffect has a missing dependency: 'euler'. Either include it or remove the dependency array.",["74"],"React Hook useEffect has missing dependencies: 'DEG2RAD' and 'euler'. Either include them or remove the dependency array.",["75"],{"desc":"76","fix":"77"},{"desc":"78","fix":"79"},{"desc":"80","fix":"81"},"Update the dependencies array to be: [gps]",{"range":"82","text":"83"},"Update the dependencies array to be: [euler, props.euler]",{"range":"84","text":"85"},"Update the dependencies array to be: [DEG2RAD, euler, props.euler]",{"range":"86","text":"87"},[2160,2162],"[gps]",[579,592],"[euler, props.euler]",[1778,1791],"[DEG2RAD, euler, props.euler]"]